# 문제
# 오늘은 신승원의 생일이다.

# 박승원은 생일을 맞아 신승원에게 인천국제공항을 선물로 줬다.

# 공항에는 G개의 게이트가 있으며 각각은 1에서 G까지의 번호를 가지고 있다.

# 공항에는 P개의 비행기가 순서대로 도착할 예정이며, 당신은 i번째 비행기를 1번부터 gi (1 ≤ gi ≤ G) 번째 게이트중 하나에 영구적으로 도킹하려 한다. 비행기가 어느 게이트에도 도킹할 수 없다면 공항이 폐쇄되고, 이후 어떤 비행기도 도착할 수 없다.

# 신승원은 가장 많은 비행기를 공항에 도킹시켜서 박승원을 행복하게 하고 싶어한다. 승원이는 비행기를 최대 몇 대 도킹시킬 수 있는가?

# 입력
# 첫 번째 줄에는 게이트의 수 G (1 ≤ G ≤ 105)가 주어진다.

# 두 번째 줄에는 비행기의 수 P (1 ≤ P ≤ 105)가 주어진다.

# 이후 P개의 줄에 gi (1 ≤ gi ≤ G) 가 주어진다.

# 출력
# 승원이가 도킹시킬 수 있는 최대의 비행기 수를 출력한다.

import sys
input = sys.stdin.readline

G = int(input())
P = int(input())
gates = [int(input()) for _ in range(P)]


# 최대한 g_i에 가깝게 넣는다
# 가깝게 넣는다는 것은, g_i부터 1까지 gate가 이용가능한지 확인하고, 이용가능하면 넣는 것이다.
# 전부 이용 불가능하면 거기서 로직을 종료하고 도킹된 비행기 수를 반환하면 된다.
# 이 경우 O(G^2)의 TC를 갖는다.

# 조금 더 줄일 수 있을까?

# gate개수 + 1만큼의 길이를 갖는 배열:table을 만든다
# 이 배열의 idx는 각 gate를 의미한다.
# 이 배열의 값은 1~g_i에 도킹된 비행기의 수이다.
# 이 배열의 값은 idx앞의 값의 영향을 받고, 뒤의 값에 영향을 준다.
# 비행기가 들어올때마다 table의 값을 update한다.
# 이 경우도 TC는 O(G^2)이 걸릴 수 있겠다.
# g_1 = G, g_2 = G-1, ... , g_P = G-P+1과 같은 경우


